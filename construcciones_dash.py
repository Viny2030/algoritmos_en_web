# -*- coding: utf-8 -*-
"""construcciones_dash.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18Io5xLisZJZtiq6bo49qAwFEC0-Fuv2B
"""

!pip install dash

!pip install dash-table

# Add this line at the top with your other imports
from dash import Dash, html, dcc, callback, Output, Input
import dash_table # <-- Add this line
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import warnings

warnings.filterwarnings("ignore")

# URL del dataset
url = "https://raw.githubusercontent.com/Viny2030/Libro_Algoritmos_contra_fraude_corrupcion/refs/heads/main/df_construccion.csv"

# Data loading and preprocessing function (can be optimized for Dash's server-side logic)
# For simplicity, we'll load it once globally, but for very large datasets
# or multi-user apps, you might want to load it within a dcc.Store or callback.
def load_and_preprocess_data(url):
    """Carga y preprocesa los datos de construcción."""
    try:
        df_construccion = pd.read_csv(url)
    except Exception as e:
        print(f"Error al cargar el archivo desde la URL: {e}")
        print("Intentando cargar un archivo local 'df_construccion (1).csv' si existe...")
        try:
            df_construccion = pd.read_csv('df_construccion (1).csv')
        except FileNotFoundError:
            print("Error: No se pudo cargar el archivo CSV desde la URL ni localmente.")
            return None
        except Exception as e_local:
            print(f"Error al cargar el archivo local: {e_local}")
            return None

    if df_construccion is None or df_construccion.empty:
        print("Error: El DataFrame de construcción está vacío o no se pudo cargar.")
        return None

    # Convertir columnas de fecha a datetime
    for col in ['Fecha_Inicio', 'Fecha_Fin_Estimada']:
        if col in df_construccion.columns and df_construccion[col].dtype == 'object':
            df_construccion[col] = pd.to_datetime(df_construccion[col], errors='coerce')

    # Ingeniería de Características
    df_construccion['Duracion_Estimada_Dias'] = (df_construccion['Fecha_Fin_Estimada'] - df_construccion['Fecha_Inicio']).dt.days.fillna(0)
    df_construccion['Plazo_Ejecucion_Dias'] = df_construccion['Plazo_Ejecucion_Dias'].fillna(0)
    df_construccion['Relacion_Plazo'] = df_construccion['Plazo_Ejecucion_Dias'] / (df_construccion['Duracion_Estimada_Dias'] + 1e-6)
    df_construccion['Avance_Obra_Porcentaje'] = df_construccion['Avance_Obra_Porcentaje'].fillna(0)
    df_construccion['Tiempo_Transcurrido_Dias'] = (pd.Timestamp('today') - df_construccion['Fecha_Inicio']).dt.days.fillna(0)
    df_construccion['Avance_Anormal'] = np.where((df_construccion['Tiempo_Transcurrido_Dias'] > 0) &
                                                (df_construccion['Avance_Obra_Porcentaje'] / (df_construccion['Tiempo_Transcurrido_Dias'] + 1e-6) < 0.1), 1, 0)
    df_construccion['Modificaciones_Contrato'] = df_construccion['Modificaciones_Contrato'].fillna(0)
    df_construccion['Adjudicacion_Unica'] = df_construccion['Adjudicacion_Unica'].fillna(0).astype(int)
    df_construccion['Monto_Contrato'] = df_construccion['Monto_Contrato'].fillna(0)

    # Codificación simple de variables categóricas
    categorical_cols = ['Organismo_Contratante', 'Tipo_Obra', 'Estado_Obra', 'Empresa_Constructora']
    for col in categorical_cols:
        if col in df_construccion.columns and df_construccion[col].dtype == 'object':
            df_construccion[col + '_Cod'] = pd.factorize(df_construccion[col])[0]
        else:
            df_construccion[col + '_Cod'] = -1

    df_construccion['Es_Sospechoso'] = df_construccion['Es_Sospechoso'].fillna(0).astype(int)
    return df_construccion

df = load_and_preprocess_data(url)

if df is None:
    # Handle the case where data loading failed
    app = Dash(__name__)
    app.layout = html.Div([
        html.H1("Error de Carga de Datos"),
        html.P("No se pudo cargar el DataFrame. Por favor, revise la fuente de datos.")
    ])
else:
    app = Dash(__name__)

    # --- Dash Layout ---
    app.layout = html.Div(children=[
        html.H1(children='Análisis de Posible Corrupción en Proyectos de Construcción',
                style={'textAlign': 'center', 'color': '#7FDBFF'}),
        html.P(children='Este panel muestra un análisis de proyectos de construcción para identificar posibles casos de corrupción.',
               style={'textAlign': 'center', 'color': '#FFFFFF'}),

        html.Div([
            html.Div([
                html.Label("Organismo Contratante:"),
                dcc.Checklist(
                    id='organismo-filter',
                    options=[{'label': org, 'value': org} for org in df['Organismo_Contratante'].unique()],
                    value=[],
                    inline=False,
                    style={'color': '#FFFFFF'}
                ),
                html.Label("Tipo de Obra:"),
                dcc.Checklist(
                    id='tipo-obra-filter',
                    options=[{'label': tipo, 'value': tipo} for tipo in df['Tipo_Obra'].unique()],
                    value=[],
                    inline=False,
                    style={'color': '#FFFFFF'}
                ),
                html.Label("Estado de Obra:"),
                dcc.Checklist(
                    id='estado-obra-filter',
                    options=[{'label': estado, 'value': estado} for estado in df['Estado_Obra'].unique()],
                    value=[],
                    inline=False,
                    style={'color': '#FFFFFF'}
                ),
                html.Label("Empresa Constructora:"),
                dcc.Checklist(
                    id='empresa-filter',
                    options=[{'label': emp, 'value': emp} for emp in df['Empresa_Constructora'].unique()],
                    value=[],
                    inline=False,
                    style={'color': '#FFFFFF'}
                ),
                html.Br(),
                dcc.Checklist(
                    id='sospechoso-filter',
                    options=[{'label': 'Mostrar solo proyectos sospechosos', 'value': '1'}],
                    value=[],
                    inline=False,
                    style={'color': '#FFFFFF'}
                )
            ], style={'padding': 20, 'flex': 1, 'backgroundColor': '#2c3e50'}), # Sidebar-like column

            html.Div([
                html.H2("Proyectos de Construcción Filtrados", style={'color': '#7FDBFF'}),
                dash_table.DataTable(
                    id='filtered-data-table',
                    columns=[{"name": i, "id": i} for i in df.columns],
                    page_size=10,
                    style_table={'overflowX': 'auto', 'minWidth': '100%'},
                    style_header={
                        'backgroundColor': 'rgb(30, 30, 30)',
                        'color': 'white',
                        'fontWeight': 'bold'
                    },
                    style_data_conditional=[
                        {
                            'if': {'row_index': 'odd'},
                            'backgroundColor': 'rgb(50, 50, 50)'
                        },
                        {
                            'if': {'filter_query': '{Es_Sospechoso} = 1'}, # Highlight suspicious rows
                            'backgroundColor': '#ff7f0e', # Orange color for suspicious
                            'color': 'white'
                        }
                    ],
                    style_data={
                        'backgroundColor': 'rgb(60, 60, 60)',
                        'color': 'white'
                    }
                ),

                html.Hr(style={'borderColor': '#7FDBFF'}),
                html.H2("Análisis Exploratorio", style={'color': '#7FDBFF'}),

                dcc.Graph(id='pie-chart-sospechoso'),
                dcc.Graph(id='boxplot-monto'),
                dcc.Graph(id='boxplot-relacion-plazo'),
                dcc.Graph(id='bar-chart-avance-anormal')

            ], style={'padding': 20, 'flex': 4, 'backgroundColor': '#34495e'}) # Main content area
        ], style={'display': 'flex'}), # Flex container for sidebar and main content
        html.P("Este panel proporciona una visualización de los datos de proyectos de construcción y una indicación de posible corrupción.",
               style={'textAlign': 'center', 'color': '#FFFFFF', 'marginTop': '20px'})
    ], style={'backgroundColor': '#222831', 'fontFamily': 'Arial, sans-serif'}) # Overall app background

    # --- Callbacks ---
    @callback(
        Output('filtered-data-table', 'data'),
        Output('pie-chart-sospechoso', 'figure'),
        Output('boxplot-monto', 'figure'),
        Output('boxplot-relacion-plazo', 'figure'),
        Output('bar-chart-avance-anormal', 'figure'),
        Input('organismo-filter', 'value'),
        Input('tipo-obra-filter', 'value'),
        Input('estado-obra-filter', 'value'),
        Input('empresa-filter', 'value'),
        Input('sospechoso-filter', 'value')
    )
    def update_dashboard(organismo_filter, tipo_obra_filter, estado_obra_filter, empresa_filter, sospechoso_filter):
        df_filtered = df.copy()

        if organismo_filter:
            df_filtered = df_filtered[df_filtered['Organismo_Contratante'].isin(organismo_filter)]
        if tipo_obra_filter:
            df_filtered = df_filtered[df_filtered['Tipo_Obra'].isin(tipo_obra_filter)]
        if estado_obra_filter:
            df_filtered = df_filtered[df_filtered['Estado_Obra'].isin(estado_obra_filter)]
        if empresa_filter:
            df_filtered = df_filtered[df_filtered['Empresa_Constructora'].isin(empresa_filter)]
        if '1' in sospechoso_filter: # Checkbox value is '1' if checked
            df_filtered = df_filtered[df_filtered['Es_Sospechoso'] == 1]

        # Convert DataFrame to dictionary for DataTable
        table_data = df_filtered.to_dict('records')

        # --- Generate Plots using Plotly Express/Graph Objects ---

        # 1. Distribución de proyectos sospechosos
        sospechoso_counts = df_filtered['Es_Sospechoso'].value_counts()
        labels = {0: 'No Sospechoso', 1: 'Sospechoso'}
        if not sospechoso_counts.empty:
            pie_fig = px.pie(
                names=[labels[idx] for idx in sospechoso_counts.index if idx in labels],
                values=sospechoso_counts.values,
                title='Distribución de Proyectos Sospechosos',
                color_discrete_sequence=px.colors.qualitative.Pastel
            )
        else:
            pie_fig = go.Figure().update_layout(title="No hay datos para la distribución de proyectos sospechosos")

        # 2. Monto del contrato vs. Sospechoso
        if not df_filtered.empty:
            boxplot_monto_fig = px.box(
                df_filtered,
                x='Es_Sospechoso',
                y='Monto_Contrato',
                labels={'Es_Sospechoso': '¿Es Sospechoso?', 'Monto_Contrato': 'Monto del Contrato'},
                category_orders={"Es_Sospechoso": [0, 1]},
                color_discrete_map={0: '#3D9970', 1: '#FF4136'}, # Green for No Sospechoso, Red for Sospechoso
                title='Monto del Contrato vs. Sospecha'
            )
            boxplot_monto_fig.update_xaxes(tickvals=[0, 1], ticktext=['No Sospechoso', 'Sospechoso'])
        else:
            boxplot_monto_fig = go.Figure().update_layout(title="No hay datos para el Monto del Contrato vs. Sospecha")

        # 3. Relación Plazo vs. Sospechoso
        if not df_filtered.empty:
            boxplot_plazo_fig = px.box(
                df_filtered,
                x='Es_Sospechoso',
                y='Relacion_Plazo',
                labels={'Es_Sospechoso': '¿Es Sospechoso?', 'Relacion_Plazo': 'Relación Plazo (Plazo Ejecución / Duración Estimada)'},
                category_orders={"Es_Sospechoso": [0, 1]},
                color_discrete_map={0: '#3D9970', 1: '#FF4136'},
                title='Relación Plazo vs. Sospecha'
            )
            boxplot_plazo_fig.update_xaxes(tickvals=[0, 1], ticktext=['No Sospechoso', 'Sospechoso'])
        else:
            boxplot_plazo_fig = go.Figure().update_layout(title="No hay datos para la Relación Plazo vs. Sospecha")

        # 4. Avance Anormal vs. Sospechoso (Stacked Bar Chart)
        if not df_filtered.empty:
            avance_anormal_counts = df_filtered.groupby('Es_Sospechoso')['Avance_Anormal'].value_counts().unstack(fill_value=0)

            bar_fig = go.Figure()

            if 0 in avance_anormal_counts.columns:
                bar_fig.add_trace(go.Bar(
                    x=avance_anormal_counts.index,
                    y=avance_anormal_counts[0],
                    name='No Anormal',
                    marker_color='#2ECC40' # Green
                ))
            if 1 in avance_anormal_counts.columns:
                bar_fig.add_trace(go.Bar(
                    x=avance_anormal_counts.index,
                    y=avance_anormal_counts[1],
                    name='Anormal',
                    marker_color='#FF851B' # Orange
                ))

            bar_fig.update_layout(
                barmode='stack',
                title_text='Avance Anormal vs. Sospecha',
                xaxis=dict(
                    tickmode='array',
                    tickvals=[0, 1],
                    ticktext=['No Sospechoso', 'Sospechoso'],
                    title_text='¿Es Sospechoso?'
                ),
                yaxis_title='Número de Proyectos',
                legend_title='Avance Anormal'
            )
        else:
            bar_fig = go.Figure().update_layout(title="No hay datos para Avance Anormal vs. Sospecha")

        return table_data, pie_fig, boxplot_monto_fig, boxplot_plazo_fig, bar_fig

# Run the Dash app
if __name__ == '__main__':
    app.run(debug=True)