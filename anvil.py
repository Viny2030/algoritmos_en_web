# -*- coding: utf-8 -*-
"""anvil.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W2SZ4-cUHHFXyB6Enn4cK1RvJ_Ciw_o-
"""

!pip install anvil-uplink

import anvil.server
import pandas as pd
import numpy as np

# URL del dataset - El servidor de Anvil puede acceder a URLs externas
URL = "https://raw.githubusercontent.com/Viny2030/Libro_Algoritmos_contra_fraude_corrupcion/refs/heads/main/df_construccion.csv"

@anvil.server.callable
def load_and_preprocess_data_server():
    """Carga y preprocesa los datos de construcción en el servidor."""
    try:
        df_construccion = pd.read_csv(URL)
    except Exception as e:
        print(f"Server Error: Error al cargar el archivo desde la URL: {e}")
        # En una aplicación real, podrías intentar cargar un recurso local o lanzar un error más específico
        return None

    if df_construccion is None or df_construccion.empty:
        print("Server Error: El DataFrame de construcción está vacío o no se pudo cargar.")
        return None

    # Convertir columnas de fecha a datetime
    for col in ['Fecha_Inicio', 'Fecha_Fin_Estimada']:
        if col in df_construccion.columns and df_construccion[col].dtype == 'object':
            df_construccion[col] = pd.to_datetime(df_construccion[col], errors='coerce')

    # Ingeniería de Características
    # Usa pd.Timestamp.now() para la hora actual en el servidor
    df_construccion['Duracion_Estimada_Dias'] = (df_construccion['Fecha_Fin_Estimada'] - df_construccion['Fecha_Inicio']).dt.days.fillna(0)
    df_construccion['Plazo_Ejecucion_Dias'] = df_construccion['Plazo_Ejecucion_Dias'].fillna(0)
    df_construccion['Relacion_Plazo'] = df_construccion['Plazo_Ejecucion_Dias'] / (df_construccion['Duracion_Estimada_Dias'] + 1e-6)
    df_construccion['Avance_Obra_Porcentaje'] = df_construccion['Avance_Obra_Porcentaje'].fillna(0)
    df_construccion['Tiempo_Transcurrido_Dias'] = (pd.Timestamp.now() - df_construccion['Fecha_Inicio']).dt.days.fillna(0)
    df_construccion['Avance_Anormal'] = np.where((df_construccion['Tiempo_Transcurrido_Dias'] > 0) &
                                                (df_construccion['Avance_Obra_Porcentaje'] / (df_construccion['Tiempo_Transcurrido_Dias'] + 1e-6) < 0.1), 1, 0)
    df_construccion['Modificaciones_Contrato'] = df_construccion['Modificaciones_Contrato'].fillna(0)
    df_construccion['Adjudicacion_Unica'] = df_construccion['Adjudicacion_Unica'].fillna(0).astype(int)
    df_construccion['Monto_Contrato'] = df_construccion['Monto_Contrato'].fillna(0)

    # Codificación simple de variables categóricas
    categorical_cols = ['Organismo_Contratante', 'Tipo_Obra', 'Estado_Obra', 'Empresa_Constructora']
    for col in categorical_cols:
        if col in df_construccion.columns and df_construccion[col].dtype == 'object':
            df_construccion[col + '_Cod'] = pd.factorize(df_construccion[col])[0]
        else:
            df_construccion[col + '_Cod'] = -1

    df_construccion['Es_Sospechoso'] = df_construccion['Es_Sospechoso'].fillna(0).astype(int)

    # Retornar como cadena JSON para una transferencia eficiente
    return df_construccion.to_json(orient="split", date_format="iso")