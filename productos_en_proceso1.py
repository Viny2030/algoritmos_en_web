# =================================================================
# SCRIPT DE AUDITOR√çA DE PRODUCTOS EN PROCESO CON STREAMLIT Y DOCKER
# =================================================================

# --- 1. IMPORTACIONES UNIFICADAS ---
import pandas as pd
import numpy as np
import random
from faker import Faker
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
import streamlit as st

# ===============================================================
# 2. CONFIGURACI√ìN DE P√ÅGINA Y GENERACI√ìN DE DATOS
# ===============================================================

st.set_page_config (page_title="Auditor√≠a de Productos en Proceso", layout="wide")


@st.cache_data
def generar_datos_simulados():
    """Genera datos simulados de productos en proceso."""
    np.random.seed (42)
    random.seed (42)
    fake = Faker ('es_AR')
    Faker.seed (42)
    num_registros = 50
    etapas_produccion = ['Corte', 'Ensamblado', 'Soldadura', 'Pintura', 'Control de calidad']
    lineas_produccion = ['L√≠nea A', 'L√≠nea B', 'L√≠nea C']
    productos = ['Silla', 'Mesa', 'Estanter√≠a', 'Armario', 'Puerta']

    productos_proceso = []
    for i in range (num_registros):
        fecha_inicio = fake.date_between (start_date='-30d', end_date='-1d')
        duracion_estimada = random.randint (1, 10)
        avance_porcentaje = random.randint (10, 95)

        productos_proceso.append ({
            'id_proceso': f'WIP-{1000 + i}',
            'producto': random.choice (productos),
            'lote': f'L-{fake.random_int (min=1000, max=9999)}',
            'etapa_actual': random.choice (etapas_produccion),
            'linea_produccion': random.choice (lineas_produccion),
            'cantidad_en_proceso': random.randint (10, 200),
            'fecha_inicio': fecha_inicio,
            'fecha_estim_termino': fecha_inicio + timedelta (days=duracion_estimada),
            'avance_porcentaje': avance_porcentaje,
            'estado': 'En proceso'
        })

    return pd.DataFrame (productos_proceso)


# ===============================================================
# 3. L√ìGICA DE AUDITOR√çA
# ===============================================================

def aplicar_auditoria(df):
    """Aplica las reglas heur√≠sticas y el modelo de detecci√≥n de anomal√≠as."""
    df['fecha_inicio'] = pd.to_datetime (df['fecha_inicio'])
    df['fecha_estim_termino'] = pd.to_datetime (df['fecha_estim_termino'])

    def reglas_auditoria(row):
        alertas = []
        hoy = pd.to_datetime ("today")
        if row['avance_porcentaje'] <= 10 and row['estado'] == 'En proceso':
            alertas.append ("Avance muy bajo")
        if row['fecha_estim_termino'] < hoy and row['estado'] == 'En proceso':
            alertas.append ("Fecha estimada vencida")
        if row['cantidad_en_proceso'] <= 0:
            alertas.append ("Cantidad inv√°lida")
        if row['avance_porcentaje'] > 100 or row['avance_porcentaje'] < 0:
            alertas.append ("Avance fuera de rango")
        return " | ".join (alertas) if alertas else "Sin alertas"

    df['alerta_heuristica'] = df.apply (reglas_auditoria, axis=1)

    features = ['cantidad_en_proceso', 'avance_porcentaje']
    X = df[features].fillna (0)
    scaler = StandardScaler ()
    X_scaled = scaler.fit_transform (X)
    modelo = IsolationForest (n_estimators=100, contamination=0.1, random_state=42)
    df['anomaly'] = modelo.fit_predict (X_scaled)
    df['resultado_auditoria'] = df['anomaly'].map ({1: 'Normal', -1: 'An√≥malo'})

    return df


# ===============================================================
# 4. INTERFAZ DE STREAMLIT
# ===============================================================

st.title ("‚öôÔ∏è Auditor√≠a de Productos en Proceso (WIP)")
st.markdown (
    "Esta aplicaci√≥n audita datos simulados de productos en proceso, identificando anomal√≠as y aplicando reglas de negocio.")

if st.button ("Iniciar Auditor√≠a", help="Genera datos simulados y aplica el an√°lisis completo"):
    with st.spinner ('Ejecutando la auditor√≠a...'):
        df_proceso = generar_datos_simulados ()
        df_auditado = aplicar_auditoria (df_proceso)

        st.success ("‚úÖ Auditor√≠a completada con √©xito.")

        # --- Secci√≥n 1: Resumen y Alertas ---
        st.header ("üîç Resultados de la Auditor√≠a")

        col1, col2 = st.columns (2)
        with col1:
            st.metric ("Total de Procesos", len (df_auditado))
        with col2:
            anomalias_count = len (df_auditado[df_auditado['resultado_auditoria'] == 'An√≥malo'])
            st.metric ("Anomal√≠as Detectadas", anomalias_count)

        anomalies_and_alerts_df = df_auditado[
            (df_auditado['resultado_auditoria'] == 'An√≥malo') | (df_auditado['alerta_heuristica'] != "Sin alertas")]

        st.subheader ("Procesos An√≥malos o con Alertas")
        if not anomalies_and_alerts_df.empty:
            columnas_interes = ['id_proceso', 'producto', 'etapa_actual', 'linea_produccion', 'cantidad_en_proceso',
                                'avance_porcentaje', 'estado', 'alerta_heuristica', 'resultado_auditoria']
            st.dataframe (anomalies_and_alerts_df[columnas_interes])

            csv_data = anomalies_and_alerts_df.to_csv (index=False).encode ('utf-8')
            st.download_button (
                label="Descargar Reporte de Anomal√≠as CSV",
                data=csv_data,
                file_name="reporte_anomalias_wip.csv",
                mime="text/csv"
            )
        else:
            st.info ("¬°No se encontraron anomal√≠as o alertas significativas!")

        # --- Secci√≥n 2: Visualizaciones ---
        st.header ("üìà Visualizaciones Clave")

        # Gr√°fico 1: Avance por Etapa
        fig1, ax1 = plt.subplots (figsize=(12, 7))
        sns.boxplot (data=df_auditado, x='avance_porcentaje', y='etapa_actual', hue='resultado_auditoria',
                     palette={'Normal': 'skyblue', 'An√≥malo': 'salmon'}, ax=ax1)
        ax1.set_title ('Avance por Etapa de Producci√≥n')
        ax1.set_xlabel ('Avance (%)')
        ax1.set_ylabel ('Etapa Actual')
        st.pyplot (fig1)

        # Gr√°fico 2: Cantidad en Proceso vs Avance
        fig2, ax2 = plt.subplots (figsize=(10, 6))
        sns.scatterplot (data=df_auditado, x='cantidad_en_proceso', y='avance_porcentaje', hue='resultado_auditoria',
                         style='linea_produccion', palette={'Normal': 'green', 'An√≥malo': 'red'}, alpha=0.8, s=100,
                         ax=ax2)
        ax2.set_title ('Cantidad en Proceso vs Avance (%)')
        ax2.set_xlabel ('Cantidad en Proceso (unidades)')
        ax2.set_ylabel ('Avance (%)')
        st.pyplot (fig2)