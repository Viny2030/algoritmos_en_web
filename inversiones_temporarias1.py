# ===============================================================
# SCRIPT DE AUDITOR√çA DE INVERSIONES CON STREAMLIT Y DOCKER
# ===============================================================

# --- 1. IMPORTACIONES UNIFICADAS ---
import pandas as pd
import numpy as np
import random
from faker import Faker
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
import streamlit as st

# ===============================================================
# 2. CONFIGURACI√ìN Y GENERACI√ìN DE DATOS SIMULADOS
# ===============================================================

st.set_page_config (page_title="Auditor√≠a de Inversiones", layout="wide")


@st.cache_data
def generar_datos_simulados():
    """Genera datos de inversiones temporarias simulados."""
    np.random.seed (456)
    random.seed (456)
    fake = Faker ('es_AR')
    Faker.seed (456)
    num_inversiones = 100
    tipos_inversion = ['Fondo Com√∫n de Inversi√≥n (FCI)', 'Plazo Fijo Bancario', 'Acciones (Cotizaci√≥n)',
                       'Bonos del Tesoro', 'Cauciones Burs√°tiles']
    plazos_dias = [30, 60, 90, 180, 365]

    empresas_inversoras = [
        {'empresa_id': 2000 + i, 'nombre_empresa': fake.company (), 'cuit': fake.unique.bothify (text='30-########-#')}
        for i in range (20)]
    inversiones = []

    for i in range (num_inversiones):
        inversora = random.choice (empresas_inversoras)
        tipo = random.choice (tipos_inversion)
        fecha_inicio = fake.date_between (start_date='-2y', end_date='today')

        if tipo in ['Plazo Fijo Bancario', 'Cauciones Burs√°tiles']:
            dias_plazo = random.choice (plazos_dias)
            fecha_vencimiento = fecha_inicio + timedelta (days=dias_plazo)
        else:
            fecha_vencimiento, dias_plazo = None, None

        monto_inicial = round (random.uniform (100000, 5000000), 2)

        tasa_anual_map = {
            'Plazo Fijo Bancario': random.uniform (0.05, 0.12),
            'Fondo Com√∫n de Inversi√≥n (FCI)': random.uniform (0.03, 0.15),
            'Bonos del Tesoro': random.uniform (0.04, 0.10),
            'Acciones (Cotizaci√≥n)': random.uniform (-0.05, 0.20),
            'Cauciones Burs√°tiles': random.uniform (0.06, 0.10)
        }
        tasa_anual = round (tasa_anual_map.get (tipo, 0.0), 4)

        if fecha_vencimiento and fecha_vencimiento < datetime.now ().date ():
            estado = 'Vencida' if random.random () <= 0.2 else 'Liquidada'
            monto_final_simulado = monto_inicial * (1 + tasa_anual * (dias_plazo / 365.0))
        else:
            estado = 'Activa'
            days_passed = max (0, (datetime.now ().date () - fecha_inicio).days)
            monto_final_simulado = monto_inicial * (1 + tasa_anual * (days_passed / 365.0) * random.uniform (0.8, 1.2))

        inversiones.append ({
            'inversion_id': f'INV-{20000 + i}',
            'empresa_id': inversora['empresa_id'],
            'tipo_inversion': tipo,
            'entidad_emisora': fake.company () if random.random () > 0.5 else fake.bank (),
            'fecha_inicio': fecha_inicio,
            'fecha_vencimiento': fecha_vencimiento,
            'dias_plazo': dias_plazo,
            'monto_inicial': monto_inicial,
            'tasa_anual_simulada': tasa_anual,
            'valor_actual_simulado': round (monto_final_simulado, 2),
            'estado_inversion': estado,
            'ganancia_perdida_simulada': round (monto_final_simulado - monto_inicial, 2)
        })

    df_inversiones = pd.DataFrame (inversiones)
    df_empresas_inversoras = pd.DataFrame (empresas_inversoras)
    df = pd.merge (df_inversiones, df_empresas_inversoras, on='empresa_id')
    df.sort_values (by='fecha_inicio', inplace=True)
    return df


# ===============================================================
# 3. L√ìGICA DE AUDITOR√çA
# ===============================================================

def aplicar_auditoria(df):
    """Aplica la detecci√≥n de anomal√≠as y las reglas heur√≠sticas."""
    df['fecha_inicio'] = pd.to_datetime (df['fecha_inicio'], errors='coerce')
    df['fecha_vencimiento'] = pd.to_datetime (df['fecha_vencimiento'], errors='coerce')

    # Detecci√≥n de Anomal√≠as (Isolation Forest)
    features = ['monto_inicial', 'tasa_anual_simulada', 'valor_actual_simulado', 'ganancia_perdida_simulada']
    X = df[features].copy ()
    scaler = StandardScaler ()
    X_scaled = scaler.fit_transform (X.fillna (0))
    iso_forest = IsolationForest (n_estimators=100, contamination=0.1, random_state=42)
    df['anomaly'] = iso_forest.fit_predict (X_scaled)
    df['resultado_auditoria'] = df['anomaly'].map ({1: 'Normal', -1: 'An√≥malo'})

    # Reglas Heur√≠sticas
    def auditoria_heuristica(row):
        alertas = []
        hoy = pd.to_datetime ('today')
        if pd.notnull (row['fecha_vencimiento']) and row['fecha_vencimiento'] < hoy and row[
            'estado_inversion'] != 'Liquidada':
            alertas.append ("Vencida no liquidada")
        if row['ganancia_perdida_simulada'] < 0:
            alertas.append ("P√©rdida registrada")
        if row['tasa_anual_simulada'] < 0.02 or row['tasa_anual_simulada'] > 0.25:
            alertas.append ("Tasa fuera de rango")
        return " | ".join (alertas) if alertas else "Sin alertas"

    df['alerta_heuristica'] = df.apply (auditoria_heuristica, axis=1)

    return df


# ===============================================================
# 4. INTERFAZ DE STREAMLIT
# ===============================================================

st.title ("üí∞ Auditor√≠a de Inversiones Temporarias")
st.markdown (
    "Esta aplicaci√≥n realiza una auditor√≠a de inversiones simuladas, detectando anomal√≠as con **Isolation Forest** y aplicando reglas heur√≠sticas para identificar posibles riesgos.")

if st.button ("Ejecutar Auditor√≠a", help="Genera datos simulados y aplica el an√°lisis"):
    with st.spinner ('Ejecutando la auditor√≠a, por favor espere...'):
        df = generar_datos_simulados ()
        df_auditado = aplicar_auditoria (df)

        st.success ("‚úÖ Auditor√≠a completada con √©xito.")

        # --- Secci√≥n 1: Resumen y Alertas ---
        st.header ("üîç Resultados de la Auditor√≠a")

        col1, col2 = st.columns (2)
        with col1:
            st.metric ("Total de Inversiones", len (df_auditado))
        with col2:
            anomalias_count = len (df_auditado[df_auditado['resultado_auditoria'] == 'An√≥malo'])
            st.metric ("Anomal√≠as Detectadas", anomalias_count)

        anomalies_df = df_auditado[df_auditado['resultado_auditoria'] == 'An√≥malo']

        st.subheader ("Inversiones An√≥malas y con Alertas")
        if not anomalies_df.empty:
            columnas_interes = ['inversion_id', 'nombre_empresa', 'tipo_inversion', 'estado_inversion', 'monto_inicial',
                                'ganancia_perdida_simulada', 'tasa_anual_simulada', 'alerta_heuristica',
                                'resultado_auditoria']
            st.dataframe (anomalies_df[columnas_interes])

            csv_data = anomalies_df.to_csv (index=False).encode ('utf-8')
            st.download_button (
                label="Descargar Reporte de Anomal√≠as CSV",
                data=csv_data,
                file_name="reporte_anomalias.csv",
                mime="text/csv"
            )
        else:
            st.info ("¬°No se encontraron anomal√≠as significativas seg√∫n el modelo!")

        # --- Secci√≥n 2: Visualizaciones Clave ---
        st.header ("üìà Visualizaciones")

        # Gr√°fico 1: Distribuci√≥n de Tasas
        fig1, ax1 = plt.subplots (figsize=(10, 6))
        sns.histplot (df_auditado['tasa_anual_simulada'], kde=True, bins=15, color='skyblue', ax=ax1)
        ax1.set_title ('Distribuci√≥n de Tasas Anuales Simuladas')
        ax1.set_xlabel ('Tasa Anual')
        ax1.set_ylabel ('Frecuencia')
        st.pyplot (fig1)

        # Gr√°fico 2: Anomalias en Ganancia vs Monto
        fig2, ax2 = plt.subplots (figsize=(12, 8))
        sns.scatterplot (
            data=df_auditado, x='monto_inicial', y='ganancia_perdida_simulada',
            hue='resultado_auditoria', style='estado_inversion', size='tasa_anual_simulada',
            sizes=(50, 250), palette={'Normal': 'green', 'An√≥malo': 'red'}, alpha=0.7, ax=ax2
        )
        ax2.set_title ('Monto Inicial vs Ganancia/P√©rdida (Detecci√≥n de Anomal√≠as)')
        ax2.set_xlabel ('Monto Inicial ($)')
        ax2.set_ylabel ('Ganancia / P√©rdida Simulada ($)')
        ax2.get_xaxis ().set_major_formatter (plt.FuncFormatter (lambda x, p: format (int (x), ',')))
        ax2.get_yaxis ().set_major_formatter (plt.FuncFormatter (lambda y, p: format (int (y), ',')))
        ax2.legend (title='Resultado Auditor√≠a')
        st.pyplot (fig2)