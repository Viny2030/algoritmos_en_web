# =================================================================
# SCRIPT DE AUDITOR√çA DE PR√âSTAMOS OBTENIDOS CON STREAMLIT Y DOCKER
# =================================================================

# --- 1. IMPORTACIONES UNIFICADAS ---
import pandas as pd
import numpy as np
import random
from datetime import datetime, timedelta
from scipy.stats import zscore
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import IsolationForest
import streamlit as st

# =================================================================
# 2. CONFIGURACI√ìN DE P√ÅGINA Y GENERACI√ìN DE DATOS
# =================================================================

st.set_page_config (page_title="Auditor√≠a de Pr√©stamos Obtenidos", layout="wide")


@st.cache_data
def generar_dataset_prestamos_obtenidos(num_prestamos=50, fecha_inicio='2022-01-01',
                                        rango_monto=(10000, 500000),
                                        rango_tasa_interes=(0.05, 0.20),
                                        rango_plazo_meses=(12, 60),
                                        semilla=42):
    """Genera un DataFrame con datos simulados de pr√©stamos obtenidos."""
    if semilla is not None:
        np.random.seed (semilla)
        random.seed (semilla)

    data = []
    fecha_fin = datetime.now ()
    estados_pago = ['Activo', 'Pagado', 'Atrasado', 'Cancelado']

    for i in range (num_prestamos):
        id_prestamo = f'LOAN-{i + 1:04d}'
        dias_desde_inicio = (fecha_fin - datetime.strptime (fecha_inicio, '%Y-%m-%d')).days
        fecha_obtencion = datetime.strptime (fecha_inicio, '%Y-%m-%d') + timedelta (
            days=np.random.randint (0, dias_desde_inicio))
        monto_prestamo = round (np.random.uniform (rango_monto[0], rango_monto[1]), 2)
        tasa_interes_anual = round (np.random.uniform (rango_tasa_interes[0], rango_tasa_interes[1]), 4)
        plazo_meses = np.random.randint (rango_plazo_meses[0], rango_plazo_meses[1] + 1)
        estado = np.random.choice (estados_pago, p=[0.6, 0.2, 0.15, 0.05])

        data.append ({
            'ID_Prestamo': id_prestamo,
            'Fecha_Obtencion': fecha_obtencion.strftime ('%Y-%m-%d'),
            'Monto_Prestamo': monto_prestamo,
            'Tasa_Interes_Anual': tasa_interes_anual,
            'Plazo_Meses': plazo_meses,
            'Estado_Pago': estado
        })

    df = pd.DataFrame (data)
    df = df.sort_values (by='Fecha_Obtencion').reset_index (drop=True)
    return df


# =================================================================
# 3. L√ìGICA DE AUDITOR√çA
# =================================================================

def aplicar_auditoria(df):
    """Aplica las reglas heur√≠sticas y el modelo de detecci√≥n de anomal√≠as."""
    df['Fecha_Obtencion'] = pd.to_datetime (df['Fecha_Obtencion'])
    numeric_cols = ['Monto_Prestamo', 'Tasa_Interes_Anual', 'Plazo_Meses']
    for col in numeric_cols:
        df[col] = pd.to_numeric (df[col], errors='coerce')
    df.fillna (0, inplace=True)

    df['Pago_Total_Proyectado'] = df['Monto_Prestamo'] * (1 + df['Tasa_Interes_Anual'] * (df['Plazo_Meses'] / 12))
    fecha_actual_referencia = datetime.now ()
    df['Dias_Desde_Obtencion'] = (fecha_actual_referencia - df['Fecha_Obtencion']).dt.days

    df['monto_zscore'] = zscore (df['Monto_Prestamo'])
    df['tasa_zscore'] = zscore (df['Tasa_Interes_Anual'])

    features_for_anomaly_detection = df[['Monto_Prestamo', 'Tasa_Interes_Anual', 'Plazo_Meses']].copy ()
    features_for_anomaly_detection.fillna (features_for_anomaly_detection.median (), inplace=True)
    iso_forest = IsolationForest (random_state=42, contamination=0.1)
    iso_forest.fit (features_for_anomaly_detection)
    df['is_anomaly_ia'] = iso_forest.predict (features_for_anomaly_detection)

    return df


# =================================================================
# 4. INTERFAZ DE STREAMLIT
# =================================================================

st.title ("üí∏ Auditor√≠a de Pr√©stamos Obtenidos")
st.markdown (
    "Esta aplicaci√≥n audita datos simulados de pr√©stamos, identificando anomal√≠as en montos y tasas de inter√©s.")

if st.button ("Iniciar Auditor√≠a", help="Genera datos simulados y aplica el an√°lisis completo"):
    with st.spinner ('Ejecutando la auditor√≠a...'):
        df_prestamos = generar_dataset_prestamos_obtenidos (num_prestamos=50, semilla=42)
        df_auditado = aplicar_auditoria (df_prestamos)

        st.success ("‚úÖ Auditor√≠a completada con √©xito.")

        # --- Secci√≥n 1: Resumen y Alertas ---
        st.header ("üîç Informe de Auditor√≠a")

        col1, col2, col3 = st.columns (3)
        with col1:
            st.metric ("Total de Pr√©stamos", len (df_auditado))
        with col2:
            monto_total = df_auditado['Monto_Prestamo'].sum ()
            st.metric ("Monto Total de Pr√©stamos", f"${monto_total:,.2f}")
        with col3:
            anomalias_ia_count = (df_auditado['is_anomaly_ia'] == -1).sum ()
            st.metric ("Anomal√≠as por IA", anomalias_ia_count)

        st.subheader ("Resumen de Estados de Pago")
        st.dataframe (df_auditado['Estado_Pago'].value_counts ())

        anomalias_ia_df = df_auditado[df_auditado['is_anomaly_ia'] == -1]

        if not anomalias_ia_df.empty:
            st.subheader ("Pr√©stamos con Anomal√≠as Detectadas")
            st.dataframe (anomalias_ia_df[['ID_Prestamo', 'Monto_Prestamo', 'Tasa_Interes_Anual', 'Plazo_Meses']])
            csv_data = anomalias_ia_df.to_csv (index=False).encode ('utf-8')
            st.download_button (
                label="Descargar Reporte de Anomal√≠as CSV",
                data=csv_data,
                file_name="reporte_anomalias_prestamos.csv",
                mime="text/csv"
            )
        else:
            st.info ("No se detectaron anomal√≠as por Isolation Forest.")

        # --- Secci√≥n 2: Visualizaciones ---
        st.header ("üìà Visualizaciones")

        # Gr√°ficos de distribuci√≥n
        col_viz1, col_viz2, col_viz3 = st.columns (3)
        with col_viz1:
            fig1, ax1 = plt.subplots ()
            sns.histplot (df_auditado['Monto_Prestamo'], bins=10, kde=True, color='skyblue', ax=ax1)
            ax1.set_title ('1. Distribuci√≥n del Monto de Pr√©stamo')
            st.pyplot (fig1)

        with col_viz2:
            fig2, ax2 = plt.subplots ()
            sns.histplot (df_auditado['Tasa_Interes_Anual'], bins=10, kde=True, color='lightgreen', ax=ax2)
            ax2.set_title ('2. Distribuci√≥n de la Tasa de Inter√©s')
            st.pyplot (fig2)

        with col_viz3:
            fig3, ax3 = plt.subplots ()
            sns.histplot (df_auditado['Plazo_Meses'], bins=5, kde=True, color='salmon', ax=ax3)
            ax3.set_title ('3. Distribuci√≥n del Plazo (Meses)')
            st.pyplot (fig3)

        # Gr√°fico 4: Distribuci√≥n por Estado
        fig4, ax4 = plt.subplots ()
        df_auditado['Estado_Pago'].value_counts ().plot (kind='pie', autopct='%1.1f%%', startangle=90,
                                                         colors=sns.color_palette ("pastel"), ax=ax4)
        ax4.set_title ('4. Distribuci√≥n de Pr√©stamos por Estado de Pago')
        ax4.set_ylabel ('')
        st.pyplot (fig4)

        # Gr√°fico 5: Detecci√≥n de Anomal√≠as con IA
        st.subheader ("Detecci√≥n de Anomal√≠as por Isolation Forest")
        fig5, ax5 = plt.subplots (figsize=(12, 8))
        sns.scatterplot (
            x='Monto_Prestamo',
            y='Tasa_Interes_Anual',
            hue='is_anomaly_ia',
            data=df_auditado,
            palette={1: 'blue', -1: 'red'},
            style='is_anomaly_ia',
            markers={1: 'o', -1: 'X'},
            s=100,
            ax=ax5
        )
        ax5.set_title ('Monto vs. Tasa de Inter√©s')
        ax5.set_xlabel ('Monto del Pr√©stamo')
        ax5.set_ylabel ('Tasa de Inter√©s Anual')
        handles, labels = ax5.get_legend_handles_labels ()
        ax5.legend (handles, ['Normal', 'Anomal√≠a'], title='Resultado IA')
        st.pyplot (fig5)