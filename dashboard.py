# -*- coding: utf-8 -*-
"""dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QVdV6Pxwq06erVzqPHa5vpcoun1l4oJj
"""

!pip install panel
!pip install plotly
!pip install pandas
!pip install numpy

import panel as pn
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import warnings

warnings.filterwarnings("ignore")
pn.extension('plotly', template='fast')

# URL del dataset
url = "https://raw.githubusercontent.com/Viny2030/Libro_Algoritmos_contra_fraude_corrupcion/main/df_construccion.csv"

@pn.cache
def load_and_preprocess_data(url):
    try:
        df = pd.read_csv(url)
    except Exception as e:
        print(f"Error al cargar el archivo desde la URL: {e}")
        try:
            df = pd.read_csv("df_construccion (1).csv")
        except:
            return None

    for col in ['Fecha_Inicio', 'Fecha_Fin_Estimada']:
        df[col] = pd.to_datetime(df[col], errors='coerce')

    df['Duracion_Estimada_Dias'] = (df['Fecha_Fin_Estimada'] - df['Fecha_Inicio']).dt.days.fillna(0)
    df['Plazo_Ejecucion_Dias'] = df['Plazo_Ejecucion_Dias'].fillna(0)
    df['Relacion_Plazo'] = df['Plazo_Ejecucion_Dias'] / (df['Duracion_Estimada_Dias'] + 1e-6)
    df['Avance_Obra_Porcentaje'] = df['Avance_Obra_Porcentaje'].fillna(0)
    df['Tiempo_Transcurrido_Dias'] = (pd.Timestamp('today') - df['Fecha_Inicio']).dt.days.fillna(0)
    df['Avance_Anormal'] = np.where(
        (df['Tiempo_Transcurrido_Dias'] > 0) &
        (df['Avance_Obra_Porcentaje'] / (df['Tiempo_Transcurrido_Dias'] + 1e-6) < 0.1), 1, 0
    )
    df['Modificaciones_Contrato'] = df['Modificaciones_Contrato'].fillna(0)
    df['Adjudicacion_Unica'] = df['Adjudicacion_Unica'].fillna(0).astype(int)
    df['Monto_Contrato'] = df['Monto_Contrato'].fillna(0)
    for col in ['Organismo_Contratante', 'Tipo_Obra', 'Estado_Obra', 'Empresa_Constructora']:
        df[col + "_Cod"] = pd.factorize(df[col])[0]
    df['Es_Sospechoso'] = df['Es_Sospechoso'].fillna(0).astype(int)
    return df

df = load_and_preprocess_data(url)

if df is None:
    pn.Column(
        "# Error",
        "No se pudo cargar el dataset."
    ).servable()
else:
    # Widgets
    organismo_select = pn.widgets.MultiChoice(name="Organismo Contratante", options=df['Organismo_Contratante'].unique().tolist())
    tipo_obra_select = pn.widgets.MultiChoice(name="Tipo de Obra", options=df['Tipo_Obra'].unique().tolist())
    estado_obra_select = pn.widgets.MultiChoice(name="Estado de Obra", options=df['Estado_Obra'].unique().tolist())
    empresa_select = pn.widgets.MultiChoice(name="Empresa Constructora", options=df['Empresa_Constructora'].unique().tolist())
    sospechoso_toggle = pn.widgets.Checkbox(name="Solo sospechosos", value=False)

    @pn.depends(
        organismo_select, tipo_obra_select,
        estado_obra_select, empresa_select,
        sospechoso_toggle
    )
    def update_dashboard(orgs, tipos, estados, empresas, sospechosos):
        df_filtered = df.copy()
        if orgs: df_filtered = df_filtered[df_filtered['Organismo_Contratante'].isin(orgs)]
        if tipos: df_filtered = df_filtered[df_filtered['Tipo_Obra'].isin(tipos)]
        if estados: df_filtered = df_filtered[df_filtered['Estado_Obra'].isin(estados)]
        if empresas: df_filtered = df_filtered[df_filtered['Empresa_Constructora'].isin(empresas)]
        if sospechosos: df_filtered = df_filtered[df_filtered['Es_Sospechoso'] == 1]

        # Pie chart
        counts = df_filtered['Es_Sospechoso'].value_counts()
        pie_fig = px.pie(
            names=['No Sospechoso' if i == 0 else 'Sospechoso' for i in counts.index],
            values=counts.values,
            title="Distribución de Proyectos Sospechosos",
            color_discrete_sequence=px.colors.qualitative.Pastel
        ) if not df_filtered.empty else go.Figure().update_layout(title="Sin datos")

        # Boxplot monto
        boxplot_monto = px.box(
            df_filtered, x='Es_Sospechoso', y='Monto_Contrato',
            labels={'Es_Sospechoso': 'Sospechoso', 'Monto_Contrato': 'Monto del Contrato'},
            title='Monto del Contrato vs Sospechosos',
            color='Es_Sospechoso'
        ) if not df_filtered.empty else go.Figure().update_layout(title="Sin datos")

        # Boxplot plazo
        boxplot_plazo = px.box(
            df_filtered, x='Es_Sospechoso', y='Relacion_Plazo',
            labels={'Es_Sospechoso': 'Sospechoso', 'Relacion_Plazo': 'Relación Plazo'},
            title='Relación Plazo vs Sospechosos',
            color='Es_Sospechoso'
        ) if not df_filtered.empty else go.Figure().update_layout(title="Sin datos")

        # Avance Anormal
        avance = df_filtered.groupby('Es_Sospechoso')['Avance_Anormal'].value_counts().unstack(fill_value=0)
        bar_fig = go.Figure()
        if not avance.empty:
            if 0 in avance.columns:
                bar_fig.add_trace(go.Bar(name="Normal", x=avance.index, y=avance[0], marker_color="#2ECC40"))
            if 1 in avance.columns:
                bar_fig.add_trace(go.Bar(name="Anormal", x=avance.index, y=avance[1], marker_color="#FF4136"))
            bar_fig.update_layout(barmode='stack', title="Avance Anormal vs Sospecha")

        return pn.Column(
            pn.pane.DataFrame(df_filtered, width=1000, height=300),
            pn.pane.Plotly(pie_fig, height=350),
            pn.pane.Plotly(boxplot_monto, height=350),
            pn.pane.Plotly(boxplot_plazo, height=350),
            pn.pane.Plotly(bar_fig, height=350),
        )

    template = pn.template.FastListTemplate(
        title="Análisis de Posible Corrupción en Obras Públicas",
        sidebar=[
            pn.pane.Markdown("## Filtros"),
            organismo_select,
            tipo_obra_select,
            estado_obra_select,
            empresa_select,
            sospechoso_toggle
        ],
        main=[
            pn.pane.Markdown("## Resultados de Análisis"),
            update_dashboard
        ],
        header_background="#34495e",
        accent_base_color="#7FDBFF"
    )

    template.servable()

import panel as pn
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import warnings

# Configuración inicial
warnings.filterwarnings("ignore")
pn.extension('plotly', template='fast')

# Cargar dataset desde URL
url = "https://raw.githubusercontent.com/Viny2030/Libro_Algoritmos_contra_fraude_corrupcion/main/df_construccion.csv"

@pn.cache
def load_and_preprocess_data(url):
    try:
        df = pd.read_csv(url)
    except Exception as e:
        print(f"Error al cargar el dataset: {e}")
        return None

    # Procesamiento de datos
    for col in ['Fecha_Inicio', 'Fecha_Fin_Estimada']:
        df[col] = pd.to_datetime(df[col], errors='coerce')

    df['Duracion_Estimada_Dias'] = (df['Fecha_Fin_Estimada'] - df['Fecha_Inicio']).dt.days.fillna(0)
    df['Plazo_Ejecucion_Dias'] = df['Plazo_Ejecucion_Dias'].fillna(0)
    df['Relacion_Plazo'] = df['Plazo_Ejecucion_Dias'] / (df['Duracion_Estimada_Dias'] + 1e-6)
    df['Avance_Obra_Porcentaje'] = df['Avance_Obra_Porcentaje'].fillna(0)
    df['Tiempo_Transcurrido_Dias'] = (pd.Timestamp('today') - df['Fecha_Inicio']).dt.days.fillna(0)
    df['Avance_Anormal'] = np.where(
        (df['Tiempo_Transcurrido_Dias'] > 0) &
        (df['Avance_Obra_Porcentaje'] / (df['Tiempo_Transcurrido_Dias'] + 1e-6) < 0.1), 1, 0
    )
    df['Modificaciones_Contrato'] = df['Modificaciones_Contrato'].fillna(0)
    df['Adjudicacion_Unica'] = df['Adjudicacion_Unica'].fillna(0).astype(int)
    df['Monto_Contrato'] = df['Monto_Contrato'].fillna(0)

    for col in ['Organismo_Contratante', 'Tipo_Obra', 'Estado_Obra', 'Empresa_Constructora']:
        df[col + "_Cod"] = pd.factorize(df[col])[0]

    df['Es_Sospechoso'] = df['Es_Sospechoso'].fillna(0).astype(int)
    return df

df = load_and_preprocess_data(url)

if df is None:
    pn.Column(
        "# Error",
        "No se pudo cargar el dataset."
    ).servable()
else:
    # Widgets
    organismo_select = pn.widgets.MultiChoice(name="Organismo Contratante", options=df['Organismo_Contratante'].unique().tolist())
    tipo_obra_select = pn.widgets.MultiChoice(name="Tipo de Obra", options=df['Tipo_Obra'].unique().tolist())
    estado_obra_select = pn.widgets.MultiChoice(name="Estado de Obra", options=df['Estado_Obra'].unique().tolist())
    empresa_select = pn.widgets.MultiChoice(name="Empresa Constructora", options=df['Empresa_Constructora'].unique().tolist())
    sospechoso_toggle = pn.widgets.Checkbox(name="Mostrar solo sospechosos", value=False)

    @pn.depends(
        organismo_select, tipo_obra_select,
        estado_obra_select, empresa_select,
        sospechoso_toggle
    )
    def update_dashboard(orgs, tipos, estados, empresas, sospechosos):
        df_filtered = df.copy()
        if orgs: df_filtered = df_filtered[df_filtered['Organismo_Contratante'].isin(orgs)]
        if tipos: df_filtered = df_filtered[df_filtered['Tipo_Obra'].isin(tipos)]
        if estados: df_filtered = df_filtered[df_filtered['Estado_Obra'].isin(estados)]
        if empresas: df_filtered = df_filtered[df_filtered['Empresa_Constructora'].isin(empresas)]
        if sospechosos: df_filtered = df_filtered[df_filtered['Es_Sospechoso'] == 1]

        # Pie chart
        counts = df_filtered['Es_Sospechoso'].value_counts()
        pie_fig = px.pie(
            names=['No Sospechoso' if i == 0 else 'Sospechoso' for i in counts.index],
            values=counts.values,
            title="Distribución de Proyectos Sospechosos",
            color_discrete_sequence=px.colors.qualitative.Pastel
        ) if not df_filtered.empty else go.Figure().update_layout(title="Sin datos")

        # Boxplot monto
        boxplot_monto = px.box(
            df_filtered, x='Es_Sospechoso', y='Monto_Contrato',
            labels={'Es_Sospechoso': 'Sospechoso', 'Monto_Contrato': 'Monto del Contrato'},
            title='Monto del Contrato vs Sospechosos',
            color='Es_Sospechoso'
        ) if not df_filtered.empty else go.Figure().update_layout(title="Sin datos")

        # Boxplot plazo
        boxplot_plazo = px.box(
            df_filtered, x='Es_Sospechoso', y='Relacion_Plazo',
            labels={'Es_Sospechoso': 'Sospechoso', 'Relacion_Plazo': 'Relación Plazo'},
            title='Relación Plazo vs Sospechosos',
            color='Es_Sospechoso'
        ) if not df_filtered.empty else go.Figure().update_layout(title="Sin datos")

        # Avance Anormal
        avance = df_filtered.groupby('Es_Sospechoso')['Avance_Anormal'].value_counts().unstack(fill_value=0)
        bar_fig = go.Figure()
        if not avance.empty:
            if 0 in avance.columns:
                bar_fig.add_trace(go.Bar(name="Normal", x=avance.index, y=avance[0], marker_color="#2ECC40"))
            if 1 in avance.columns:
                bar_fig.add_trace(go.Bar(name="Anormal", x=avance.index, y=avance[1], marker_color="#FF4136"))
            bar_fig.update_layout(barmode='stack', title="Avance Anormal vs Sospecha")

        return pn.Column(
            pn.pane.DataFrame(df_filtered, width=1000, height=300),
            pn.pane.Plotly(pie_fig, height=350),
            pn.pane.Plotly(boxplot_monto, height=350),
            pn.pane.Plotly(boxplot_plazo, height=350),
            pn.pane.Plotly(bar_fig, height=350),
        )

    # Template de Panel
    template = pn.template.FastListTemplate(
        title="Análisis de Corrupción en Obras Públicas",
        sidebar=[
            pn.pane.Markdown("## Filtros"),
            organismo_select,
            tipo_obra_select,
            estado_obra_select,
            empresa_select,
            sospechoso_toggle
        ],
        main=[
            pn.pane.Markdown("## Resultados"),
            update_dashboard
        ],
        header_background="#34495e",
        accent_base_color="#7FDBFF"
    )

    template.servable()