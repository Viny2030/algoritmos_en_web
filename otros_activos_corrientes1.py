# =================================================================
# SCRIPT DE AUDITOR√çA DE OTROS ACTIVOS CORRIENTES CON STREAMLIT Y DOCKER
# =================================================================

# --- 1. IMPORTACIONES UNIFICADAS ---
import pandas as pd
import numpy as np
import random
from faker import Faker
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
import streamlit as st

# ===============================================================
# 2. CONFIGURACI√ìN DE P√ÅGINA Y GENERACI√ìN DE DATOS
# ===============================================================

st.set_page_config (page_title="Auditor√≠a de Otros Activos Corrientes", layout="wide")


@st.cache_data
def generar_datos_simulados():
    """Genera datos simulados de otros activos corrientes para la auditor√≠a."""
    frases = [
        "Pago anticipado por servicios contratados", "Dep√≥sito en garant√≠a para contrato vigente",
        "Valores a cobrar por ventas a cr√©dito", "Documentos por cobrar pendientes de pago",
        "Gastos pagados por anticipado de seguros", "Anticipo a proveedor por compra de insumos"
    ]
    np.random.seed (321)
    random.seed (321)
    fake = Faker ('es_ES')
    Faker.seed (321)

    num_registros = 30
    tipos_activos = ['Anticipo a proveedores', 'Dep√≥sitos en garant√≠a', 'Valores a cobrar', 'Documentos por cobrar',
                     'Otros cr√©ditos', 'Gastos pagados por anticipado']
    monedas = ['ARS', 'USD', 'EUR']

    activos_corrientes = []
    for i in range (num_registros):
        tipo = random.choice (tipos_activos)
        monto = round (random.uniform (1000, 200000), 2)
        moneda = random.choice (monedas)
        fecha_registro = fake.date_between (start_date='-90d', end_date='today')
        descripcion = random.choice (frases)
        activos_corrientes.append ({
            'id_activo_corriente': f'AC-{1000 + i}',
            'tipo_activo': tipo,
            'monto': monto,
            'moneda': moneda,
            'fecha_registro': fecha_registro,
            'descripcion': descripcion
        })
    return pd.DataFrame (activos_corrientes)


# ===============================================================
# 3. L√ìGICA DE AUDITOR√çA
# ===============================================================

def aplicar_auditoria(df):
    """Aplica las reglas heur√≠sticas y el modelo de detecci√≥n de anomal√≠as."""
    df['fecha_registro'] = pd.to_datetime (df['fecha_registro'], errors='coerce')

    def reglas_auditoria(row):
        alertas = []
        if row['monto'] <= 0: alertas.append ("Monto no v√°lido")
        if row['moneda'] not in ['ARS', 'USD', 'EUR']: alertas.append ("Moneda desconocida")
        if pd.isnull (row['fecha_registro']): alertas.append ("Fecha inv√°lida")
        return " | ".join (alertas) if alertas else "OK"

    df['alerta_heuristica'] = df.apply (reglas_auditoria, axis=1)

    features = ['monto']
    X = df[features].fillna (0)
    X_scaled = StandardScaler ().fit_transform (X)
    modelo = IsolationForest (n_estimators=100, contamination=0.1, random_state=42)
    df['anomaly'] = modelo.fit_predict (X_scaled)
    df['resultado_auditoria'] = df['anomaly'].map ({1: 'Normal', -1: 'An√≥malo'})

    return df


# ===============================================================
# 4. INTERFAZ DE STREAMLIT
# ===============================================================

st.title ("üí∞ Auditor√≠a de Otros Activos Corrientes")
st.markdown (
    "Esta aplicaci√≥n audita datos simulados de otros activos corrientes, identificando anomal√≠as y aplicando reglas heur√≠sticas.")

if st.button ("Iniciar Auditor√≠a", help="Genera datos simulados y aplica el an√°lisis completo"):
    with st.spinner ('Ejecutando la auditor√≠a...'):
        df_activos = generar_datos_simulados ()
        df_auditado = aplicar_auditoria (df_activos)

        st.success ("‚úÖ Auditor√≠a completada con √©xito.")

        # --- Secci√≥n 1: Resumen y Alertas ---
        st.header ("üîç Resultados de la Auditor√≠a")

        col1, col2 = st.columns (2)
        with col1:
            st.metric ("Total de Registros", len (df_auditado))
        with col2:
            anomalias_count = len (df_auditado[df_auditado['resultado_auditoria'] == 'An√≥malo'])
            st.metric ("Anomal√≠as Detectadas", anomalias_count)

        anomalies_and_alerts_df = df_auditado[
            (df_auditado['resultado_auditoria'] == 'An√≥malo') | (df_auditado['alerta_heuristica'] != "OK")]

        st.subheader ("Activos con Anomal√≠as o Alertas")
        if not anomalies_and_alerts_df.empty:
            columnas_interes = ['id_activo_corriente', 'tipo_activo', 'monto', 'alerta_heuristica',
                                'resultado_auditoria']
            st.dataframe (anomalies_and_alerts_df[columnas_interes])

            csv_data = anomalies_and_alerts_df.to_csv (index=False).encode ('utf-8')
            st.download_button (
                label="Descargar Reporte de Anomal√≠as CSV",
                data=csv_data,
                file_name="reporte_anomalias_activos_corrientes.csv",
                mime="text/csv"
            )
        else:
            st.info ("¬°No se encontraron anomal√≠as o alertas significativas!")

        # --- Secci√≥n 2: Visualizaciones ---
        st.header ("üìà Visualizaciones Clave")

        # Gr√°fico 1: Distribuci√≥n de Montos
        fig1, ax1 = plt.subplots (figsize=(8, 4))
        sns.histplot (df_auditado['monto'], bins=15, kde=True, color='skyblue', ax=ax1)
        ax1.set_title ("Distribuci√≥n de Montos")
        st.pyplot (fig1)

        # Gr√°fico 2: Montos por Tipo de Activo
        fig2, ax2 = plt.subplots (figsize=(10, 5))
        sns.boxplot (data=df_auditado, x='tipo_activo', y='monto', hue='resultado_auditoria', ax=ax2)
        ax2.set_title ("Montos por Tipo de Activo")
        ax2.tick_params (axis='x', rotation=45)
        st.pyplot (fig2)

        # Gr√°fico 3: Montos por Moneda
        fig3, ax3 = plt.subplots (figsize=(6, 4))
        sns.boxplot (data=df_auditado, x='moneda', y='monto', ax=ax3)
        ax3.set_title ("Montos por Moneda")
        st.pyplot (fig3)

        # Gr√°fico 4: Cantidad de Activos Registrados por Mes
        df_auditado['mes'] = df_auditado['fecha_registro'].dt.to_period ("M").astype (str)
        fig4, ax4 = plt.subplots (figsize=(10, 5))
        sns.countplot (data=df_auditado, x='mes', hue='resultado_auditoria', ax=ax4)
        ax4.set_title ("Cantidad de Activos Registrados por Mes")
        ax4.tick_params (axis='x', rotation=45)
        st.pyplot (fig4)